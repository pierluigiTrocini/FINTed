/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.unical.demacs.enterprise.fintedapp.apis

import android.content.Context
import android.widget.Toast
import it.unical.demacs.enterprise.fintedapp.models.ReviewDto

import it.unical.demacs.enterprise.fintedapp.infrastructure.*
import it.unical.demacs.enterprise.fintedapp.models.AccessTokenResponse

class ReviewControllerApi(basePath: String = "http://localhost:8080", context: Context) : ApiClient(basePath) {

    val context = context

    private fun showMessage(message: String) {
        Toast.makeText(context, message, Toast.LENGTH_LONG).show()
    }

    /**
     * 
     * 
     * @param username  
     * @param id  
     * @param authorization  
     * @return void
     */
    fun delete1(username: kotlin.String, id: kotlin.Long, authorization: kotlin.String): Unit {
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply {
            localVariableHeaders["Authorization"] = this.toString()
        }
        localVariableHeaders["Accept"] = "*/*"
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/reviews/{username}/{id}".replace("{" + "username" + "}", "$username").replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> {
                showMessage("Client error: ${(response as ClientError<*>).body as? String ?: "Client error"}")
            }
            ResponseType.ServerError -> {
                showMessage("Server error: ${(response as ClientError<*>).body as? String ?: "Server error"}")
            }
        }
    }
    /**
     * 
     * 
     * @param username  
     * @return kotlin.Array<ReviewDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getByTarget(username: kotlin.String): kotlin.Array<ReviewDto> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/reviews/target/{username}".replace("{" + "username" + "}", "$username")
        )
        val response = request<kotlin.Array<ReviewDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ReviewDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> {
                showMessage("Client error: ${(response as ClientError<*>).body as? String ?: "Client error"}")
                (response as Success<*>).data as Array<ReviewDto>
            }
            ResponseType.ServerError -> {
                showMessage("Server error: ${(response as ClientError<*>).body as? String ?: "Server error"}")
                (response as Success<*>).data as Array<ReviewDto>
            }
        }
    }
    /**
     * 
     * 
     * @param username  
     * @param authorization  
     * @return kotlin.Array<ReviewDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getPersonal2(username: kotlin.String, authorization: kotlin.String): kotlin.Array<ReviewDto> {
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply {
            localVariableHeaders["Authorization"] = this.toString()
        }
        localVariableHeaders["Accept"] = "*/*"
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/reviews/personal/{username}".replace("{" + "username" + "}", "$username"), headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ReviewDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ReviewDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> {
                showMessage("Client error: ${(response as ClientError<*>).body as? String ?: "Client error"}")
                (response as Success<*>).data as Array<ReviewDto>
            }
            ResponseType.ServerError -> {
                showMessage("Server error: ${(response as ClientError<*>).body as? String ?: "Server error"}")
                (response as Success<*>).data as Array<ReviewDto>
            }
        }
    }
    /**
     * 
     * 
     * @param body  
     * @param authorization  
     * @return ReviewDto
     */
    @Suppress("UNCHECKED_CAST")
    fun save1(body: ReviewDto, authorization: kotlin.String): ReviewDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply {
            localVariableHeaders["Authorization"] = this.toString()
        }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "*/*"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/reviews/{username}", headers = localVariableHeaders
        )
        val response = request<ReviewDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ReviewDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> {
                showMessage("Client error: ${(response as ClientError<*>).body as? String ?: "Client error"}")
                (response as Success<*>).data as ReviewDto
            }
            ResponseType.ServerError -> {
                showMessage("Server error: ${(response as ClientError<*>).body as? String ?: "Server error"}")
                (response as Success<*>).data as ReviewDto
            }
        }
    }
}
