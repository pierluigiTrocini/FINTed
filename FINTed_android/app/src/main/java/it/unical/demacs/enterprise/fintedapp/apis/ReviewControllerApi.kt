/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.unical.demacs.enterprise.fintedapp.apis

import it.unical.demacs.enterprise.fintedapp.models.ReviewDto
import it.unical.demacs.enterprise.fintedapp.models.ServiceError

import it.unical.demacs.enterprise.fintedapp.infrastructure.*
import okhttp3.Headers
import okhttp3.internal.addHeaderLenient

class ReviewControllerApi(basePath: kotlin.String = ApiResources().backendUrl) : ApiClient(basePath) {
    /**
     *
     *
     * @param id
     * @param username
     * @return void
     */
    fun delete1(id: kotlin.Long, username: kotlin.String, token: String): Unit {
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/reviews/{username}/{id}".replace("{" + "id" + "}", "$id").replace("{" + "username" + "}", "$username")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<Any?>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param id
     * @return kotlin.Array<ReviewDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getAuthorReviews(id: kotlin.Long, token: String): kotlin.Array<ReviewDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/reviews/author/{id}".replace("{" + "id" + "}", "$id")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<kotlin.Array<ReviewDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ReviewDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param id
     * @return kotlin.Array<ReviewDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getTargetReviews(id: kotlin.Long, token: String): kotlin.Array<ReviewDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/reviews/target/{id}".replace("{" + "id" + "}", "$id")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<kotlin.Array<ReviewDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ReviewDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param body
     * @return ReviewDto
     */
    @Suppress("UNCHECKED_CAST")
    fun save1(body: ReviewDto, token: String): ReviewDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/reviews/"
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<ReviewDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ReviewDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
