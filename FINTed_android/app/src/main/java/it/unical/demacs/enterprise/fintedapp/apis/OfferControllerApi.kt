/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.unical.demacs.enterprise.fintedapp.apis

import it.unical.demacs.enterprise.fintedapp.models.OfferDto

import it.unical.demacs.enterprise.fintedapp.infrastructure.*
import okhttp3.Headers
import okhttp3.internal.addHeaderLenient

class OfferControllerApi(basePath: kotlin.String = ApiResources().backendUrl) : ApiClient(basePath) {

    /**
     *
     *
     * @param body
     * @return OfferDto
     */
    @Suppress("UNCHECKED_CAST")
    fun acceptOffer(body: OfferDto, token: String): OfferDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/offers/accept"
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )


        val response = request<OfferDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OfferDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param id
     * @param username
     * @return void
     */
    fun delete3(id: kotlin.Long, username: kotlin.String, token: String): Unit {
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/offers/{username}/{id}".replace("{" + "id" + "}", "$id").replace("{" + "username" + "}", "$username")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<Any?>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param body
     * @return OfferDto
     */
    @Suppress("UNCHECKED_CAST")
    fun denyOffer(body: OfferDto, token: String): OfferDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/offers/deny"
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<OfferDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OfferDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param id
     * @return kotlin.Array<OfferDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getPostOffers(id: kotlin.Long, token: String): kotlin.Array<OfferDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/offers/post/{id}".replace("{" + "id" + "}", "$id")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<kotlin.Array<OfferDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<OfferDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param id
     * @return kotlin.Array<OfferDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getSellOffers(id: kotlin.Long, token: String): kotlin.Array<OfferDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/offers/seller/{id}".replace("{" + "id" + "}", "$id")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<kotlin.Array<OfferDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<OfferDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param id
     * @return kotlin.Array<OfferDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserOffers(id: kotlin.Long, token: String): kotlin.Array<OfferDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/offers/user/{id}".replace("{" + "id" + "}", "$id")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<kotlin.Array<OfferDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<OfferDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param body
     * @return OfferDto
     */
    @Suppress("UNCHECKED_CAST")
    fun save3(body: OfferDto, token: String): OfferDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/offers/"
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<OfferDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OfferDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
