/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.unical.demacs.enterprise.fintedapp.apis

import it.unical.demacs.enterprise.fintedapp.models.PostDto
import it.unical.demacs.enterprise.fintedapp.models.ServiceError

import it.unical.demacs.enterprise.fintedapp.infrastructure.*
import okhttp3.Headers
import okhttp3.internal.addHeaderLenient

class PostControllerApi(basePath: kotlin.String = ApiResources().backendUrl) : ApiClient(basePath) {

    /**
     *
     *
     * @param id
     * @return void
     */
    fun delete2(id: kotlin.Long, token: String): Unit {
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/posts/username/{id}".replace("{" + "id" + "}", "$id")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<Any?>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param id
     * @return PostDto
     */
    @Suppress("UNCHECKED_CAST")
    fun get1(id: kotlin.Long, token: String): PostDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/posts/{id}".replace("{" + "id" + "}", "$id")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<PostDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PostDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param page
     * @return kotlin.Array<PostDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getAll1(page: kotlin.Int, token: String): kotlin.Array<PostDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/posts/all/{page}".replace("{" + "page" + "}", "$page")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<kotlin.Array<PostDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PostDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param page
     * @param user
     * @return kotlin.Array<PostDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getHomepage(page: kotlin.Int, user: kotlin.Long, token: String): kotlin.Array<PostDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/posts/home/{user}/{page}".replace("{" + "page" + "}", "$page").replace("{" + "user" + "}", "$user")
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<kotlin.Array<PostDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PostDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param body
     * @return PostDto
     */
    @Suppress("UNCHECKED_CAST")
    fun save2(body: PostDto, token: String): PostDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/posts/"
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<PostDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PostDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param body
     * @return PostDto
     */
    @Suppress("UNCHECKED_CAST")
    fun update1(body: PostDto, token: String): PostDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/posts/"
        )

        localVariableConfig.headers = mapOf(
            "Authorization" to "Bearer $token"
        )

        val response = request<PostDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PostDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
